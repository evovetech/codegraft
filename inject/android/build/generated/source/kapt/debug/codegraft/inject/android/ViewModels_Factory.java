// Generated by Dagger (https://google.github.io/dagger).
package codegraft.inject.android;

import android.arch.lifecycle.ViewModel;
import dagger.internal.Factory;
import java.util.Map;
import javax.inject.Provider;

public final class ViewModels_Factory implements Factory<ViewModels> {
  private final Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>> providersProvider;

  public ViewModels_Factory(
      Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>> providersProvider) {
    this.providersProvider = providersProvider;
  }

  @Override
  public ViewModels get() {
    return new ViewModels(providersProvider.get());
  }

  public static ViewModels_Factory create(
      Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>> providersProvider) {
    return new ViewModels_Factory(providersProvider);
  }

  public static ViewModels newViewModels(
      Map<Class<? extends ViewModel>, Provider<ViewModel>> providers) {
    return new ViewModels(providers);
  }
}
