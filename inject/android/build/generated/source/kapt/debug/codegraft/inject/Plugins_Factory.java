// Generated by Dagger (https://google.github.io/dagger).
package codegraft.inject;

import dagger.internal.Factory;
import java.util.Map;
import javax.inject.Provider;

public final class Plugins_Factory implements Factory<Plugins> {
  private final Provider<Map<Class<? extends Plugin>, Provider<Plugin>>> providersProvider;

  public Plugins_Factory(
      Provider<Map<Class<? extends Plugin>, Provider<Plugin>>> providersProvider) {
    this.providersProvider = providersProvider;
  }

  @Override
  public Plugins get() {
    return new Plugins(providersProvider.get());
  }

  public static Plugins_Factory create(
      Provider<Map<Class<? extends Plugin>, Provider<Plugin>>> providersProvider) {
    return new Plugins_Factory(providersProvider);
  }

  public static Plugins newPlugins(Map<Class<? extends Plugin>, Provider<Plugin>> providers) {
    return new Plugins(providers);
  }
}
