/*
 * Copyright 2018 evove.tech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.gradle.plugin.management.PluginManagementSpec

ext.app = loadApp()
ext.pom = loadPom()
app.plugins = [
        'org.gradle.kotlin.kotlin-dsl': [
                version: '0.15.6'
        ],
        'kotlin'                      : [
                module : app.kotlinModule,
                version: app.kotlinVersion
        ],
        'com.android.application'     : [
                module : "com.android.tools.build:gradle",
                version: app.androidGradleVersion
        ],
        'realm'                       : [
                module : app.realmModule,
                version: app.realmVersion
        ]
]
app.configurePlugins = { PluginManagementSpec plug ->
    Closure cl = {
        repositories {
            gradlePluginPortal()
            maven { url "https://maven.google.com/" }
            maven { url "https://jcenter.bintray.com/" }
        }
        resolutionStrategy {
            eachPlugin {
                def reqId = requested.id.id
                app.plugins.find { String key, Map value ->
                    if (reqId.startsWith(key)) {
                        def module = value.get("module", null)
                        def version = value.get("version", null)
                        if (module && version) {
                            useModule("${module}:${version}")
                        } else if (module) {
                            useModule("${module}:${requested.version}")
                        } else if (version) {
                            useVersion(version)
                        }
                        return true
                    }
                    return false
                }
            }
        }
    }
    cl.delegate = plug
    cl(plug)
}

gradle.rootProject { p ->
    settings.ext.properties.each { prop ->
        p.ext."${prop.key}" = prop.value
    }
    group = app.group
    version = app.version

    task wrapper(type: Wrapper) {
        gradleVersion app.gradleVersion
        distributionType 'all'
    }
    loadProject(p)
}

gradle.beforeProject { p ->
    p.repositories {
        google()
        jcenter()
    }
    loadProject(p)
}

def loadApp() {
    def app = new Expando()
    loadProperties(this, '../gradle.properties', app, 'app.')
    return app
}

def loadPom() {
    def pom = new Expando()
    loadProperties(this, '../gradle.properties', pom, 'pom.')
    return pom
}

static def loadProject(p) {
    def app = new Expando(p.app.properties)
    p.ext.app = app
    loadProperties(p, p.file('gradle.properties'), app, 'app.')
    def pom = new Expando(p.pom.properties)
    p.ext.pom = pom
    loadProperties(p, p.file('gradle.properties'), pom, 'pom.')
}

static def loadProperties(p, fileName, obj, objPrefix) {
    def props = new Properties()
    props.load(p.file(fileName).newReader())
    props.each { prop ->
        def thing = p.ext
        def key = prop.key as String
        if (key.startsWith(objPrefix)) {
            key = key.substring(objPrefix.length())
            thing = obj
        }
        thing."${key}" = prop.value
    }
}
