/*
 * Copyright 2018 evove.tech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven-publish'

def pubName = ext.pubName
def pub = publishing.publications.create(pubName, MavenPublication)
def pompom = pom

def configureAndroid(configurations, pub, sourceSet) {
    pub.pom.withXml {
        final dependenciesNode = asNode().appendNode('dependencies')

        ext.addDependency = { Dependency dep, String scope ->
            if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified") {
                return // ignore invalid dependencies
            }

            final dependencyNode = dependenciesNode.appendNode('dependency')
            dependencyNode.appendNode('groupId', dep.group)
            dependencyNode.appendNode('artifactId', dep.name)
            dependencyNode.appendNode('version', dep.version)
            dependencyNode.appendNode('scope', scope)

            if (!dep.transitive) {
                // If this dependency is transitive, we should force exclude all its dependencies them from the POM
                final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                exclusionNode.appendNode('groupId', '*')
                exclusionNode.appendNode('artifactId', '*')
            } else if (!dep.properties.excludeRules.empty) {
                // Otherwise add specified exclude rules
                final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                dep.properties.excludeRules.each { ExcludeRule rule ->
                    exclusionNode.appendNode('groupId', rule.group ?: '*')
                    exclusionNode.appendNode('artifactId', rule.module ?: '*')
                }
            }
        }

        def compileDeps = configurations.api.getAllDependencies()
        compileDeps += configurations.getByName(sourceSet.apiConfigurationName).getAllDependencies()
        def runtimeDeps = configurations.implementation.getAllDependencies()
        runtimeDeps += configurations.getByName(sourceSet.implementationConfigurationName).getAllDependencies()
        runtimeDeps -= compileDeps

        // List all "api" dependencies (for new Gradle) as "compile" dependencies
        compileDeps.each { dep -> addDependency(dep, "compile") }
        // List all "implementation" dependencies (for new Gradle) as "runtime" dependencies
        runtimeDeps.each { dep -> addDependency(dep, "runtime") }
    }
}

afterEvaluate {
    def android = extensions.findByName("android")
    configure(pub) {
        if (android) {
            groupId pompom.groupId

            def sourceSet = android.sourceSets
                    .matching { it.name == 'release' }
                    .first()
            configureAndroid(configurations, pub, sourceSet)

            def variants
            if (android.hasProperty('libraryVariants')) {
                variants = android.libraryVariants
            } else {
                variants = android.applicationVariants
            }
            def variant = variants
                    .matching { it.name == 'release' }
                    .first()
            def output = variant.outputs.first()
            artifact(output.outputFile) {
                extension "aar"
                builtBy(variant.assemble)
            }
//            artifact("${buildDir}/outputs/aar/${project.name}-release.aar")
        } else {
            from components.java
        }
        if (project.tasks.findByName('sourcesJar')) {
            artifact(sourcesJar) {
                classifier "sources"
            }
        }
        if (project.tasks.findByName('javadocJar')) {
            artifact(javadocJar) {
                classifier "javadoc"
            }
        }
    }
    def pomArtifactId = ext.pomArtifactId()
    publishing.publications.all {
        project.configure(it) {
            artifactId = pomArtifactId
            pom.withXml {
                def root = asNode()
                root.children().last() + pomConfig
            }
        }
    }
}
