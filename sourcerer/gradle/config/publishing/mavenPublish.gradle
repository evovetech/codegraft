/*
 * Copyright 2018 evove.tech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven-publish'

def pubName = ext.pubName
def pub = publishing.publications.create(pubName, MavenPublication)
def pompom = pom

afterEvaluate {
    def android = extensions.findByName("android")
    configure(pub) {
        MavenPublication
        if (android) {
            groupId pompom.groupId
            def variants
            if (android.hasProperty('libraryVariants')) {
                variants = android.libraryVariants
            } else {
                variants = android.applicationVariants
            }
            def variant = variants
                    .matching { it.buildType.name == 'release' }
                    .first()
            def output = variant.outputs.first()
            artifact(output.outputFile) {
                extension "aar"
                builtBy(variant.assemble)
            }
//            artifact("${buildDir}/outputs/aar/${project.name}-release.aar")
        } else {
            from components.java
        }
        if (project.tasks.findByName('sourcesJar')) {
            artifact(sourcesJar) {
                classifier "sources"
            }
        }
        if (project.tasks.findByName('javadocJar')) {
            artifact(javadocJar) {
                classifier "javadoc"
            }
        }
    }
    def pomArtifactId = ext.pomArtifactId()
    publishing.publications.all {
        project.configure(it) {
            artifactId = pomArtifactId
            pom.withXml {
                def root = asNode()
                root.children().last() + pomConfig
            }
        }
    }
}
