// Generated by Dagger (https://google.github.io/dagger).
package codegraft.inject.extension.crashlytics;

import android.app.Application;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import io.fabric.sdk.android.Fabric;
import javax.inject.Provider;
import kotlin.jvm.functions.Function1;

public final class CrashesBootstrapModule_ProvideFabricFactory implements Factory<Fabric> {
  private final CrashesBootstrapModule module;

  private final Provider<Application> appProvider;

  private final Provider<Function1<? super Fabric.Builder, ? extends Fabric>> initProvider;

  public CrashesBootstrapModule_ProvideFabricFactory(
      CrashesBootstrapModule module,
      Provider<Application> appProvider,
      Provider<Function1<? super Fabric.Builder, ? extends Fabric>> initProvider) {
    this.module = module;
    this.appProvider = appProvider;
    this.initProvider = initProvider;
  }

  @Override
  public Fabric get() {
    return Preconditions.checkNotNull(
        module.provideFabric(appProvider.get(), initProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static CrashesBootstrapModule_ProvideFabricFactory create(
      CrashesBootstrapModule module,
      Provider<Application> appProvider,
      Provider<Function1<? super Fabric.Builder, ? extends Fabric>> initProvider) {
    return new CrashesBootstrapModule_ProvideFabricFactory(module, appProvider, initProvider);
  }

  public static Fabric proxyProvideFabric(
      CrashesBootstrapModule instance,
      Application app,
      Function1<? super Fabric.Builder, ? extends Fabric> init) {
    return Preconditions.checkNotNull(
        instance.provideFabric(app, init),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
