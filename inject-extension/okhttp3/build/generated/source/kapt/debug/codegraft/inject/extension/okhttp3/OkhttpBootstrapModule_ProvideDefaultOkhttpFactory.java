// Generated by Dagger (https://google.github.io/dagger).
package codegraft.inject.extension.okhttp3;

import android.app.Application;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import kotlin.jvm.functions.Function2;
import okhttp3.OkHttpClient;

public final class OkhttpBootstrapModule_ProvideDefaultOkhttpFactory
    implements Factory<OkHttpClient> {
  private final OkhttpBootstrapModule module;

  private final Provider<Application> appProvider;

  private final Provider<
          Function2<? super OkHttpClient.Builder, ? super Application, ? extends OkHttpClient>>
      initProvider;

  public OkhttpBootstrapModule_ProvideDefaultOkhttpFactory(
      OkhttpBootstrapModule module,
      Provider<Application> appProvider,
      Provider<Function2<? super OkHttpClient.Builder, ? super Application, ? extends OkHttpClient>>
          initProvider) {
    this.module = module;
    this.appProvider = appProvider;
    this.initProvider = initProvider;
  }

  @Override
  public OkHttpClient get() {
    return Preconditions.checkNotNull(
        module.provideDefaultOkhttp(appProvider.get(), initProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static OkhttpBootstrapModule_ProvideDefaultOkhttpFactory create(
      OkhttpBootstrapModule module,
      Provider<Application> appProvider,
      Provider<Function2<? super OkHttpClient.Builder, ? super Application, ? extends OkHttpClient>>
          initProvider) {
    return new OkhttpBootstrapModule_ProvideDefaultOkhttpFactory(module, appProvider, initProvider);
  }

  public static OkHttpClient proxyProvideDefaultOkhttp(
      OkhttpBootstrapModule instance,
      Application app,
      Function2<? super OkHttpClient.Builder, ? super Application, ? extends OkHttpClient> init) {
    return Preconditions.checkNotNull(
        instance.provideDefaultOkhttp(app, init),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
