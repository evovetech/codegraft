/*
 * Copyright 2018 evove.tech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id('base')
}

addTask(tasks.getByName('clean'), 'sample')
task(assembleDebug) {
    addTask(it, 'sample')
    doLast {
        println('assembleDebug = DONE')
    }
}

static def addTask(Task task, Collection<IncludedBuild> includedBuilds) {
    def taskName = ":${task.name}"
    println("taskName = ${taskName}")
    includedBuilds.each { incBuild ->
        if (incBuild != null) {
            def incTask = incBuild.task(taskName)
            println("includedBuild=${incBuild.name} -> task=${incTask.name}")
            task.dependsOn(incTask)
        }
    }
    return task
}

def addTask(Task task, String... includes) {
    def includedBuilds = includes.collect {
        try {
            gradle.includedBuild(it)
        } catch (ignored) {
            // ignore
        }
    }
    return addTask(task, includedBuilds)
}

def addTask(Task task) {
    return addTask(task, gradle.includedBuilds)
}
