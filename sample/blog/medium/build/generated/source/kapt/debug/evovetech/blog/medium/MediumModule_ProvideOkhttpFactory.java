// Generated by Dagger (https://google.github.io/dagger).
package evovetech.blog.medium;

import android.app.Application;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

public final class MediumModule_ProvideOkhttpFactory implements Factory<OkHttpClient> {
  private final MediumModule module;

  private final Provider<Application> appProvider;

  private final Provider<OkHttpClient.Builder> okhttpBuilderProvider;

  public MediumModule_ProvideOkhttpFactory(
      MediumModule module,
      Provider<Application> appProvider,
      Provider<OkHttpClient.Builder> okhttpBuilderProvider) {
    this.module = module;
    this.appProvider = appProvider;
    this.okhttpBuilderProvider = okhttpBuilderProvider;
  }

  @Override
  public OkHttpClient get() {
    return Preconditions.checkNotNull(
        module.provideOkhttp(appProvider.get(), okhttpBuilderProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static MediumModule_ProvideOkhttpFactory create(
      MediumModule module,
      Provider<Application> appProvider,
      Provider<OkHttpClient.Builder> okhttpBuilderProvider) {
    return new MediumModule_ProvideOkhttpFactory(module, appProvider, okhttpBuilderProvider);
  }

  public static OkHttpClient proxyProvideOkhttp(
      MediumModule instance, Application app, OkHttpClient.Builder okhttpBuilder) {
    return Preconditions.checkNotNull(
        instance.provideOkhttp(app, okhttpBuilder),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
