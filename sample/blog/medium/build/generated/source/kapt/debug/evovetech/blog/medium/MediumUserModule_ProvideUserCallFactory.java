// Generated by Dagger (https://google.github.io/dagger).
package evovetech.blog.medium;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Call;

public final class MediumUserModule_ProvideUserCallFactory
    implements Factory<Call<MediumResponse<User>>> {
  private final MediumUserModule module;

  private final Provider<String> usernameProvider;

  private final Provider<MediumClient> clientProvider;

  public MediumUserModule_ProvideUserCallFactory(
      MediumUserModule module,
      Provider<String> usernameProvider,
      Provider<MediumClient> clientProvider) {
    this.module = module;
    this.usernameProvider = usernameProvider;
    this.clientProvider = clientProvider;
  }

  @Override
  public Call<MediumResponse<User>> get() {
    return Preconditions.checkNotNull(
        module.provideUserCall(usernameProvider.get(), clientProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static MediumUserModule_ProvideUserCallFactory create(
      MediumUserModule module,
      Provider<String> usernameProvider,
      Provider<MediumClient> clientProvider) {
    return new MediumUserModule_ProvideUserCallFactory(module, usernameProvider, clientProvider);
  }

  public static Call<MediumResponse<User>> proxyProvideUserCall(
      MediumUserModule instance, String username, MediumClient client) {
    return Preconditions.checkNotNull(
        instance.provideUserCall(username, client),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
