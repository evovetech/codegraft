// Generated by Dagger (https://google.github.io/dagger).
package evovetech.sample;

import android.app.Application;
import codegraft.inject.BaseComponent_BootData_Factory;
import codegraft.inject.extension.crashlytics.Crashes;
import codegraft.inject.extension.crashlytics.CrashesBootstrapModule;
import codegraft.inject.extension.crashlytics.CrashesBootstrapModule_ProvideFabricFactory;
import codegraft.inject.extension.crashlytics.CrashesComponent_BootData_Factory;
import codegraft.inject.extension.okhttp3.OkhttpBootstrapModule;
import codegraft.inject.extension.okhttp3.OkhttpBootstrapModule_ProvideDefaultOkhttpFactory;
import codegraft.inject.extension.okhttp3.OkhttpComponent_BootData_Factory;
import codegraft.inject.extension.okhttp3.OkhttpModule;
import codegraft.inject.extension.realm.RealmBootstrapModule;
import codegraft.inject.extension.realm.RealmBootstrapModule_ProvideRealmConfigurationFactory;
import codegraft.inject.extension.realm.RealmComponent_BootData_Factory;
import codegraft.inject.extension.realm.RealmModule;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.Preconditions;
import evovetech.blog.medium.MediumModule;
import evovetech.finance.plaid.PlaidModule;
import io.fabric.sdk.android.Fabric;
import io.realm.RealmConfiguration;
import javax.inject.Provider;
import kotlin.jvm.functions.Function1;
import kotlin.jvm.functions.Function2;
import okhttp3.OkHttpClient;

public final class DaggerBootComponent implements BootComponent {
  private Provider<RealmModule> realmModuleProvider;

  private Provider<OkhttpModule> okhttpModuleProvider;

  private Provider<PlaidModule> plaidModuleProvider;

  private Provider<MediumModule> mediumModuleProvider;

  private Provider<Crashes> crashesProvider;

  private Provider<Application> applicationProvider;

  private Provider<Function1<? super RealmConfiguration.Builder, ? extends RealmConfiguration>>
      realmConfigurationBuilderFunction1Provider;

  private Provider<RealmConfiguration> provideRealmConfigurationProvider;

  private RealmComponent_BootData_Factory realmComponent_BootDataProvider;

  private Provider<
          Function2<? super OkHttpClient.Builder, ? super Application, ? extends OkHttpClient>>
      okHttpClientApplicationBuilderFunction2Provider;

  private Provider<OkHttpClient> provideDefaultOkhttpProvider;

  private OkhttpComponent_BootData_Factory okhttpComponent_BootDataProvider;

  private Provider<Function1<? super Fabric.Builder, ? extends Fabric>>
      fabricBuilderFunction1Provider;

  private Provider<Fabric> provideFabricProvider;

  private CrashesComponent_BootData_Factory crashesComponent_BootDataProvider;

  private BaseComponent_BootData_Factory baseComponent_BootDataProvider;

  private AppComponent_BootData_Factory appComponent_BootDataProvider;

  private Provider<AppComponent> provideComponentProvider;

  private DaggerBootComponent(Builder builder) {
    initialize(builder);
  }

  public static BootComponent.Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.realmModuleProvider = InstanceFactory.createNullable(builder.realmModule);
    this.okhttpModuleProvider = InstanceFactory.createNullable(builder.okhttpModule);
    this.plaidModuleProvider = InstanceFactory.createNullable(builder.plaidModule);
    this.mediumModuleProvider = InstanceFactory.createNullable(builder.mediumModule);
    this.crashesProvider = InstanceFactory.createNullable(builder.crashes);
    this.applicationProvider = InstanceFactory.create(builder.application);
    this.realmConfigurationBuilderFunction1Provider =
        InstanceFactory.create(builder.realmConfigurationBuilderFunction1);
    this.provideRealmConfigurationProvider =
        DoubleCheck.provider(
            RealmBootstrapModule_ProvideRealmConfigurationFactory.create(
                builder.realmBootstrapModule,
                applicationProvider,
                realmConfigurationBuilderFunction1Provider));
    this.realmComponent_BootDataProvider =
        RealmComponent_BootData_Factory.create(
            provideRealmConfigurationProvider, applicationProvider);
    this.okHttpClientApplicationBuilderFunction2Provider =
        InstanceFactory.create(builder.okHttpClientApplicationBuilderFunction2);
    this.provideDefaultOkhttpProvider =
        DoubleCheck.provider(
            OkhttpBootstrapModule_ProvideDefaultOkhttpFactory.create(
                builder.okhttpBootstrapModule,
                applicationProvider,
                okHttpClientApplicationBuilderFunction2Provider));
    this.okhttpComponent_BootDataProvider =
        OkhttpComponent_BootData_Factory.create(provideDefaultOkhttpProvider, applicationProvider);
    this.fabricBuilderFunction1Provider = InstanceFactory.create(builder.fabricBuilderFunction1);
    this.provideFabricProvider =
        DoubleCheck.provider(
            CrashesBootstrapModule_ProvideFabricFactory.create(
                builder.crashesBootstrapModule,
                applicationProvider,
                fabricBuilderFunction1Provider));
    this.crashesComponent_BootDataProvider =
        CrashesComponent_BootData_Factory.create(provideFabricProvider, applicationProvider);
    this.baseComponent_BootDataProvider =
        BaseComponent_BootData_Factory.create(applicationProvider);
    this.appComponent_BootDataProvider =
        AppComponent_BootData_Factory.create(
            realmComponent_BootDataProvider,
            okhttpComponent_BootDataProvider,
            crashesComponent_BootDataProvider,
            baseComponent_BootDataProvider);
    this.provideComponentProvider =
        DoubleCheck.provider(
            BootModule_ProvideComponentFactory.create(
                builder.bootModule,
                realmModuleProvider,
                okhttpModuleProvider,
                plaidModuleProvider,
                mediumModuleProvider,
                crashesProvider,
                appComponent_BootDataProvider));
  }

  @Override
  public AppComponent getAppComponent() {
    return provideComponentProvider.get();
  }

  private static final class Builder implements BootComponent.Builder {
    private RealmBootstrapModule realmBootstrapModule;

    private OkhttpBootstrapModule okhttpBootstrapModule;

    private CrashesBootstrapModule crashesBootstrapModule;

    private BootModule bootModule;

    private Application application;

    private Function1<? super RealmConfiguration.Builder, ? extends RealmConfiguration>
        realmConfigurationBuilderFunction1;

    private Function2<? super OkHttpClient.Builder, ? super Application, ? extends OkHttpClient>
        okHttpClientApplicationBuilderFunction2;

    private Function1<? super Fabric.Builder, ? extends Fabric> fabricBuilderFunction1;

    private RealmModule realmModule;

    private OkhttpModule okhttpModule;

    private PlaidModule plaidModule;

    private MediumModule mediumModule;

    private Crashes crashes;

    @Override
    public BootComponent build() {
      if (realmBootstrapModule == null) {
        this.realmBootstrapModule = new RealmBootstrapModule();
      }
      if (okhttpBootstrapModule == null) {
        this.okhttpBootstrapModule = new OkhttpBootstrapModule();
      }
      if (crashesBootstrapModule == null) {
        this.crashesBootstrapModule = new CrashesBootstrapModule();
      }
      if (bootModule == null) {
        this.bootModule = new BootModule();
      }
      if (application == null) {
        throw new IllegalStateException(Application.class.getCanonicalName() + " must be set");
      }
      if (realmConfigurationBuilderFunction1 == null) {
        throw new IllegalStateException(Function1.class.getCanonicalName() + " must be set");
      }
      if (okHttpClientApplicationBuilderFunction2 == null) {
        throw new IllegalStateException(Function2.class.getCanonicalName() + " must be set");
      }
      if (fabricBuilderFunction1 == null) {
        throw new IllegalStateException(Function1.class.getCanonicalName() + " must be set");
      }
      return new DaggerBootComponent(this);
    }

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public Builder realmConfigurationBuilderFunction1(
        Function1<? super RealmConfiguration.Builder, ? extends RealmConfiguration>
            realmConfigurationBuilderFunction1) {
      this.realmConfigurationBuilderFunction1 =
          Preconditions.checkNotNull(realmConfigurationBuilderFunction1);
      return this;
    }

    @Override
    public Builder okHttpClientApplicationBuilderFunction2(
        Function2<? super OkHttpClient.Builder, ? super Application, ? extends OkHttpClient>
            okHttpClientApplicationBuilderFunction2) {
      this.okHttpClientApplicationBuilderFunction2 =
          Preconditions.checkNotNull(okHttpClientApplicationBuilderFunction2);
      return this;
    }

    @Override
    public Builder fabricBuilderFunction1(
        Function1<? super Fabric.Builder, ? extends Fabric> fabricBuilderFunction1) {
      this.fabricBuilderFunction1 = Preconditions.checkNotNull(fabricBuilderFunction1);
      return this;
    }

    @Override
    public Builder realmModule(RealmModule realmModule) {
      this.realmModule = realmModule;
      return this;
    }

    @Override
    public Builder okhttpModule(OkhttpModule okhttpModule) {
      this.okhttpModule = okhttpModule;
      return this;
    }

    @Override
    public Builder plaidModule(PlaidModule plaidModule) {
      this.plaidModule = plaidModule;
      return this;
    }

    @Override
    public Builder mediumModule(MediumModule mediumModule) {
      this.mediumModule = mediumModule;
      return this;
    }

    @Override
    public Builder crashes(Crashes crashes) {
      this.crashes = crashes;
      return this;
    }

    @Override
    public Builder realmBootstrapModule(RealmBootstrapModule realmBootstrapModule) {
      this.realmBootstrapModule = Preconditions.checkNotNull(realmBootstrapModule);
      return this;
    }

    @Override
    public Builder okhttpBootstrapModule(OkhttpBootstrapModule okhttpBootstrapModule) {
      this.okhttpBootstrapModule = Preconditions.checkNotNull(okhttpBootstrapModule);
      return this;
    }

    @Override
    public Builder crashesBootstrapModule(CrashesBootstrapModule crashesBootstrapModule) {
      this.crashesBootstrapModule = Preconditions.checkNotNull(crashesBootstrapModule);
      return this;
    }
  }
}
