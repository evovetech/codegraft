// Generated by Dagger (https://google.github.io/dagger).
package evovetech.sample;

import android.app.Activity;
import android.app.Application;
import android.arch.lifecycle.ViewModel;
import android.support.v4.app.Fragment;
import codegraft.inject.Plugin;
import codegraft.inject.Plugins;
import codegraft.inject.Plugins_Factory;
import codegraft.inject.android.ViewModelComponent;
import codegraft.inject.android.ViewModelComponent_Implementation;
import codegraft.inject.android.ViewModelComponent_Implementation_Factory;
import codegraft.inject.android.ViewModelFactory;
import codegraft.inject.android.ViewModelFactory_Factory;
import codegraft.inject.android.ViewModelInstanceProvider;
import codegraft.inject.android.ViewModels;
import codegraft.inject.android.ViewModels_Factory;
import codegraft.inject.extension.crashlytics.Crashes;
import codegraft.inject.extension.crashlytics.CrashesComponent;
import codegraft.inject.extension.crashlytics.CrashesComponent_Implementation;
import codegraft.inject.extension.crashlytics.CrashesComponent_Implementation_Factory;
import codegraft.inject.extension.crashlytics.Crashes_ProvideCrashlyticsFactory;
import codegraft.inject.extension.crashlytics.Kits;
import codegraft.inject.extension.crashlytics.Kits_Factory;
import codegraft.inject.extension.okhttp3.Okhttp;
import codegraft.inject.extension.okhttp3.OkhttpComponent;
import codegraft.inject.extension.okhttp3.OkhttpComponent_Implementation;
import codegraft.inject.extension.okhttp3.OkhttpComponent_Implementation_Factory;
import codegraft.inject.extension.okhttp3.OkhttpModule;
import codegraft.inject.extension.okhttp3.OkhttpModule_ProvideDefaultOkhttpBuilderFactory;
import codegraft.inject.extension.okhttp3.Okhttp_Factory;
import codegraft.inject.extension.realm.RealmComponent;
import codegraft.inject.extension.realm.RealmComponent_Implementation;
import codegraft.inject.extension.realm.RealmComponent_Implementation_Factory;
import codegraft.inject.extension.realm.RealmModule;
import codegraft.inject.extension.realm.RealmModule_ProvideRealmFactory;
import com.crashlytics.android.Crashlytics;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import evovetech.blog.medium.MediumActivity;
import evovetech.blog.medium.MediumActivity_MembersInjector;
import evovetech.blog.medium.MediumActivity_Module_ContributeMediumActivity;
import evovetech.blog.medium.MediumClient;
import evovetech.blog.medium.MediumClient_Factory;
import evovetech.blog.medium.MediumComponent;
import evovetech.blog.medium.MediumComponent_Implementation;
import evovetech.blog.medium.MediumComponent_Implementation_Factory;
import evovetech.blog.medium.MediumModule;
import evovetech.blog.medium.MediumModule_ProvideGsonFactory;
import evovetech.blog.medium.MediumModule_ProvideMediumServiceFactory;
import evovetech.blog.medium.MediumModule_ProvideOkhttpFactory;
import evovetech.blog.medium.MediumModule_ProvideRetrofitFactory;
import evovetech.blog.medium.MediumResponse;
import evovetech.blog.medium.MediumService;
import evovetech.blog.medium.MediumUserComponent;
import evovetech.blog.medium.MediumUserModule;
import evovetech.blog.medium.MediumUserModule_ProvideUserCallFactory;
import evovetech.blog.medium.ui.medium.MediumFragment;
import evovetech.blog.medium.ui.medium.MediumFragment_MembersInjector;
import evovetech.blog.medium.ui.medium.MediumFragment_Module_ContributeMediumFragment;
import evovetech.blog.medium.ui.medium.MediumViewModel;
import evovetech.blog.medium.ui.medium.MediumViewModel_Factory;
import evovetech.finance.plaid.PlaidActivity;
import evovetech.finance.plaid.PlaidActivity_MembersInjector;
import evovetech.finance.plaid.PlaidActivity_Module_ContributePlaidActivity;
import evovetech.finance.plaid.PlaidClient;
import evovetech.finance.plaid.PlaidClient_Factory;
import evovetech.finance.plaid.PlaidComponent;
import evovetech.finance.plaid.PlaidComponent_Implementation;
import evovetech.finance.plaid.PlaidComponent_Implementation_Factory;
import evovetech.finance.plaid.PlaidModule;
import evovetech.finance.plaid.PlaidModule_ProvideOkhttpFactory;
import evovetech.finance.plaid.PlaidModule_ProvidePlaidServiceFactory;
import evovetech.finance.plaid.PlaidModule_ProvideRetrofitFactory;
import evovetech.finance.plaid.PlaidService;
import evovetech.finance.plaid.ui.plaid.PlaidFragment;
import evovetech.finance.plaid.ui.plaid.PlaidFragment_MembersInjector;
import evovetech.finance.plaid.ui.plaid.PlaidFragment_Module_ContributePlaidFragment;
import evovetech.finance.plaid.ui.plaid.PlaidViewModel;
import evovetech.finance.plaid.ui.plaid.PlaidViewModel_Factory;
import evovetech.sample.instant.ui.main.MainFragment;
import evovetech.sample.instant.ui.main.MainFragment_MembersInjector;
import evovetech.sample.instant.ui.main.MainFragment_Module_ContributeMainFragment;
import evovetech.sample.instant.ui.main.MainViewModel;
import evovetech.sample.instant.ui.main.MainViewModel_Factory;
import io.fabric.sdk.android.Fabric;
import io.realm.Realm;
import io.realm.RealmConfiguration;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Call;
import retrofit2.Retrofit;

public final class DaggerAppComponent implements AppComponent {
  private RealmModule realmModule;

  private Provider<App_Module.Subcomponent.Builder> subcomponentBuilderProvider;

  private Provider<MainActivity_Module_ContributeMainActivity.MainActivitySubcomponent.Builder>
      mainActivitySubcomponentBuilderProvider;

  private Provider<
          evovetech.sample.github.MainActivity_Module_ContributeMainActivity
              .MainActivitySubcomponent.Builder>
      mainActivitySubcomponentBuilderProvider2;

  private Provider<PlaidActivity_Module_ContributePlaidActivity.PlaidActivitySubcomponent.Builder>
      plaidActivitySubcomponentBuilderProvider;

  private Provider<
          MediumActivity_Module_ContributeMediumActivity.MediumActivitySubcomponent.Builder>
      mediumActivitySubcomponentBuilderProvider;

  private Provider<
          evovetech.sample.instant.MainActivity_Module_ContributeMainActivity
              .MainActivitySubcomponent.Builder>
      mainActivitySubcomponentBuilderProvider3;

  private Provider<PlaidFragment_Module_ContributePlaidFragment.PlaidFragmentSubcomponent.Builder>
      plaidFragmentSubcomponentBuilderProvider;

  private Provider<
          MediumFragment_Module_ContributeMediumFragment.MediumFragmentSubcomponent.Builder>
      mediumFragmentSubcomponentBuilderProvider;

  private Provider<MainFragment_Module_ContributeMainFragment.MainFragmentSubcomponent.Builder>
      mainFragmentSubcomponentBuilderProvider;

  private Provider<Application> getApplicationProvider;

  private Provider<OkHttpClient> getOkHttpClientProvider;

  private OkhttpModule_ProvideDefaultOkhttpBuilderFactory provideDefaultOkhttpBuilderProvider;

  private Provider<Okhttp> okhttpProvider;

  private Provider<Map<Class<? extends Plugin>, Provider<Plugin>>>
      mapOfClassOfAndProviderOfPluginProvider;

  private Provider<Plugins> pluginsProvider;

  private Provider<RealmConfiguration> getRealmConfigurationProvider;

  private RealmModule_ProvideRealmFactory provideRealmProvider;

  private Provider<RealmComponent_Implementation> realmComponent_ImplementationProvider;

  private Provider<OkhttpComponent_Implementation> okhttpComponent_ImplementationProvider;

  private Provider<OkHttpClient> provideOkhttpProvider;

  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<PlaidService> providePlaidServiceProvider;

  private Provider<PlaidClient> plaidClientProvider;

  private Provider<PlaidComponent_Implementation> plaidComponent_ImplementationProvider;

  private Provider<OkHttpClient> provideOkhttpProvider2;

  private MediumModule_ProvideGsonFactory provideGsonProvider;

  private Provider<Retrofit> provideRetrofitProvider2;

  private Provider<MediumService> provideMediumServiceProvider;

  private Provider<MediumClient> mediumClientProvider;

  private Provider<MediumUserComponent.Builder> mediumUserComponentBuilderProvider;

  private Provider<MediumComponent_Implementation> mediumComponent_ImplementationProvider;

  private Provider<Fabric> getFabricProvider;

  private Provider<Kits> kitsProvider;

  private Provider<Crashlytics> provideCrashlyticsProvider;

  private Provider<CrashesComponent_Implementation> crashesComponent_ImplementationProvider;

  private PlaidViewModel_Factory plaidViewModelProvider;

  private MediumViewModel_Factory mediumViewModelProvider;

  private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>>
      mapOfClassOfAndProviderOfViewModelProvider;

  private ViewModels_Factory viewModelsProvider;

  private Provider<ViewModelComponent_Implementation> viewModelComponent_ImplementationProvider;

  private DaggerAppComponent(Builder builder) {
    initialize(builder);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<
          Class<? extends Application>, Provider<AndroidInjector.Factory<? extends Application>>>
      getMapOfClassOfAndProviderOfFactoryOf() {
    return Collections
        .<Class<? extends Application>, Provider<AndroidInjector.Factory<? extends Application>>>
            singletonMap(App.class, (Provider) subcomponentBuilderProvider);
  }

  private DispatchingAndroidInjector<Application> getDispatchingAndroidInjectorOfApplication() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf());
  }

  private Map<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
      getMapOfClassOfAndProviderOfFactoryOf2() {
    return MapBuilder
        .<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
            newMapBuilder(5)
        .put(MainActivity.class, (Provider) mainActivitySubcomponentBuilderProvider)
        .put(
            evovetech.sample.github.MainActivity.class,
            (Provider) mainActivitySubcomponentBuilderProvider2)
        .put(PlaidActivity.class, (Provider) plaidActivitySubcomponentBuilderProvider)
        .put(MediumActivity.class, (Provider) mediumActivitySubcomponentBuilderProvider)
        .put(
            evovetech.sample.instant.MainActivity.class,
            (Provider) mainActivitySubcomponentBuilderProvider3)
        .build();
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf2());
  }

  private Map<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
      getMapOfClassOfAndProviderOfFactoryOf3() {
    return MapBuilder
        .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
            newMapBuilder(3)
        .put(PlaidFragment.class, (Provider) plaidFragmentSubcomponentBuilderProvider)
        .put(MediumFragment.class, (Provider) mediumFragmentSubcomponentBuilderProvider)
        .put(MainFragment.class, (Provider) mainFragmentSubcomponentBuilderProvider)
        .build();
  }

  private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf3());
  }

  private Realm getRealm() {
    return RealmModule_ProvideRealmFactory.proxyProvideRealm(
        realmModule, getRealmConfigurationProvider.get());
  }

  private Map<Class<? extends ViewModel>, Provider<ViewModel>>
      getMapOfClassOfAndProviderOfViewModel() {
    return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(3)
        .put(PlaidViewModel.class, (Provider) plaidViewModelProvider)
        .put(MediumViewModel.class, (Provider) mediumViewModelProvider)
        .put(MainViewModel.class, (Provider) MainViewModel_Factory.create())
        .build();
  }

  private ViewModels getViewModels() {
    return ViewModels_Factory.newViewModels(getMapOfClassOfAndProviderOfViewModel());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.subcomponentBuilderProvider =
        new Provider<App_Module.Subcomponent.Builder>() {
          @Override
          public App_Module.Subcomponent.Builder get() {
            return new SubcomponentBuilder();
          }
        };
    this.mainActivitySubcomponentBuilderProvider =
        new Provider<
            MainActivity_Module_ContributeMainActivity.MainActivitySubcomponent.Builder>() {
          @Override
          public MainActivity_Module_ContributeMainActivity.MainActivitySubcomponent.Builder get() {
            return new MA_M_CMA_MainActivitySubcomponentBuilder();
          }
        };
    this.mainActivitySubcomponentBuilderProvider2 =
        new Provider<
            evovetech.sample.github.MainActivity_Module_ContributeMainActivity
                .MainActivitySubcomponent.Builder>() {
          @Override
          public evovetech.sample.github.MainActivity_Module_ContributeMainActivity
                  .MainActivitySubcomponent.Builder
              get() {
            return new MA_M_CMA2_MainActivitySubcomponentBuilder();
          }
        };
    this.plaidActivitySubcomponentBuilderProvider =
        new Provider<
            PlaidActivity_Module_ContributePlaidActivity.PlaidActivitySubcomponent.Builder>() {
          @Override
          public PlaidActivity_Module_ContributePlaidActivity.PlaidActivitySubcomponent.Builder
              get() {
            return new PlaidActivitySubcomponentBuilder();
          }
        };
    this.mediumActivitySubcomponentBuilderProvider =
        new Provider<
            MediumActivity_Module_ContributeMediumActivity.MediumActivitySubcomponent.Builder>() {
          @Override
          public MediumActivity_Module_ContributeMediumActivity.MediumActivitySubcomponent.Builder
              get() {
            return new MediumActivitySubcomponentBuilder();
          }
        };
    this.mainActivitySubcomponentBuilderProvider3 =
        new Provider<
            evovetech.sample.instant.MainActivity_Module_ContributeMainActivity
                .MainActivitySubcomponent.Builder>() {
          @Override
          public evovetech.sample.instant.MainActivity_Module_ContributeMainActivity
                  .MainActivitySubcomponent.Builder
              get() {
            return new MA_M_CMA3_MainActivitySubcomponentBuilder();
          }
        };
    this.plaidFragmentSubcomponentBuilderProvider =
        new Provider<
            PlaidFragment_Module_ContributePlaidFragment.PlaidFragmentSubcomponent.Builder>() {
          @Override
          public PlaidFragment_Module_ContributePlaidFragment.PlaidFragmentSubcomponent.Builder
              get() {
            return new PlaidFragmentSubcomponentBuilder();
          }
        };
    this.mediumFragmentSubcomponentBuilderProvider =
        new Provider<
            MediumFragment_Module_ContributeMediumFragment.MediumFragmentSubcomponent.Builder>() {
          @Override
          public MediumFragment_Module_ContributeMediumFragment.MediumFragmentSubcomponent.Builder
              get() {
            return new MediumFragmentSubcomponentBuilder();
          }
        };
    this.mainFragmentSubcomponentBuilderProvider =
        new Provider<
            MainFragment_Module_ContributeMainFragment.MainFragmentSubcomponent.Builder>() {
          @Override
          public MainFragment_Module_ContributeMainFragment.MainFragmentSubcomponent.Builder get() {
            return new MainFragmentSubcomponentBuilder();
          }
        };
    this.getApplicationProvider =
        DoubleCheck.provider(
            AppComponent_BootData_GetApplicationFactory.create(builder.appComponent_BootData));
    this.getOkHttpClientProvider =
        DoubleCheck.provider(
            AppComponent_BootData_GetOkHttpClientFactory.create(builder.appComponent_BootData));
    this.provideDefaultOkhttpBuilderProvider =
        OkhttpModule_ProvideDefaultOkhttpBuilderFactory.create(
            builder.okhttpModule, getOkHttpClientProvider);
    this.okhttpProvider =
        DoubleCheck.provider(
            Okhttp_Factory.create(getOkHttpClientProvider, provideDefaultOkhttpBuilderProvider));
    this.mapOfClassOfAndProviderOfPluginProvider =
        MapProviderFactory.<Class<? extends Plugin>, Plugin>builder(1)
            .put(Okhttp.class, (Provider) okhttpProvider)
            .build();
    this.pluginsProvider =
        DoubleCheck.provider(Plugins_Factory.create(mapOfClassOfAndProviderOfPluginProvider));
    this.getRealmConfigurationProvider =
        DoubleCheck.provider(
            AppComponent_BootData_GetRealmConfigurationFactory.create(
                builder.appComponent_BootData));
    this.provideRealmProvider =
        RealmModule_ProvideRealmFactory.create(builder.realmModule, getRealmConfigurationProvider);
    this.realmComponent_ImplementationProvider =
        DoubleCheck.provider(RealmComponent_Implementation_Factory.create(provideRealmProvider));
    this.okhttpComponent_ImplementationProvider =
        DoubleCheck.provider(OkhttpComponent_Implementation_Factory.create(okhttpProvider));
    this.provideOkhttpProvider =
        DoubleCheck.provider(
            PlaidModule_ProvideOkhttpFactory.create(
                builder.plaidModule, getApplicationProvider, provideDefaultOkhttpBuilderProvider));
    this.provideRetrofitProvider =
        DoubleCheck.provider(
            PlaidModule_ProvideRetrofitFactory.create(
                builder.plaidModule, getApplicationProvider, provideOkhttpProvider));
    this.providePlaidServiceProvider =
        DoubleCheck.provider(
            PlaidModule_ProvidePlaidServiceFactory.create(
                builder.plaidModule, provideRetrofitProvider));
    this.plaidClientProvider =
        DoubleCheck.provider(
            PlaidClient_Factory.create(
                provideOkhttpProvider, provideRetrofitProvider, providePlaidServiceProvider));
    this.plaidComponent_ImplementationProvider =
        DoubleCheck.provider(PlaidComponent_Implementation_Factory.create(plaidClientProvider));
    this.provideOkhttpProvider2 =
        DoubleCheck.provider(
            MediumModule_ProvideOkhttpFactory.create(
                builder.mediumModule, getApplicationProvider, provideDefaultOkhttpBuilderProvider));
    this.provideGsonProvider = MediumModule_ProvideGsonFactory.create(builder.mediumModule);
    this.provideRetrofitProvider2 =
        DoubleCheck.provider(
            MediumModule_ProvideRetrofitFactory.create(
                builder.mediumModule,
                getApplicationProvider,
                provideOkhttpProvider2,
                provideGsonProvider));
    this.provideMediumServiceProvider =
        DoubleCheck.provider(
            MediumModule_ProvideMediumServiceFactory.create(
                builder.mediumModule, provideRetrofitProvider2));
    this.mediumClientProvider =
        DoubleCheck.provider(MediumClient_Factory.create(provideMediumServiceProvider));
    this.mediumUserComponentBuilderProvider =
        new Provider<MediumUserComponent.Builder>() {
          @Override
          public MediumUserComponent.Builder get() {
            return new MediumUserComponentBuilder();
          }
        };
    this.mediumComponent_ImplementationProvider =
        DoubleCheck.provider(
            MediumComponent_Implementation_Factory.create(
                mediumClientProvider, mediumUserComponentBuilderProvider));
    this.getFabricProvider =
        DoubleCheck.provider(
            AppComponent_BootData_GetFabricFactory.create(builder.appComponent_BootData));
    this.kitsProvider = DoubleCheck.provider(Kits_Factory.create(getFabricProvider));
    this.provideCrashlyticsProvider =
        DoubleCheck.provider(
            Crashes_ProvideCrashlyticsFactory.create(builder.crashes, kitsProvider));
    this.crashesComponent_ImplementationProvider =
        DoubleCheck.provider(
            CrashesComponent_Implementation_Factory.create(
                getFabricProvider, provideCrashlyticsProvider));
    this.plaidViewModelProvider = PlaidViewModel_Factory.create(plaidClientProvider);
    this.mediumViewModelProvider = MediumViewModel_Factory.create(mediumClientProvider);
    this.mapOfClassOfAndProviderOfViewModelProvider =
        MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(3)
            .put(PlaidViewModel.class, (Provider) plaidViewModelProvider)
            .put(MediumViewModel.class, (Provider) mediumViewModelProvider)
            .put(MainViewModel.class, (Provider) MainViewModel_Factory.create())
            .build();
    this.viewModelsProvider = ViewModels_Factory.create(mapOfClassOfAndProviderOfViewModelProvider);
    this.viewModelComponent_ImplementationProvider =
        DoubleCheck.provider(ViewModelComponent_Implementation_Factory.create(viewModelsProvider));
    this.realmModule = builder.realmModule;
  }

  @Override
  public AndroidInjector<Application> getApplicationInjector() {
    return getDispatchingAndroidInjectorOfApplication();
  }

  @Override
  public AndroidInjector<Activity> activityInjector() {
    return getDispatchingAndroidInjectorOfActivity();
  }

  @Override
  public AndroidInjector<Fragment> supportFragmentInjector() {
    return getDispatchingAndroidInjectorOfFragment();
  }

  @Override
  public Application getApplication() {
    return getApplicationProvider.get();
  }

  @Override
  public Plugins getPlugins() {
    return pluginsProvider.get();
  }

  @Override
  public RealmComponent getRealmComponent() {
    return realmComponent_ImplementationProvider.get();
  }

  @Override
  public OkhttpComponent getOkhttpComponent() {
    return okhttpComponent_ImplementationProvider.get();
  }

  @Override
  public PlaidComponent getPlaidComponent() {
    return plaidComponent_ImplementationProvider.get();
  }

  @Override
  public MediumComponent getMediumComponent() {
    return mediumComponent_ImplementationProvider.get();
  }

  @Override
  public CrashesComponent getCrashesComponent() {
    return crashesComponent_ImplementationProvider.get();
  }

  @Override
  public ViewModelComponent getViewModelComponent() {
    return viewModelComponent_ImplementationProvider.get();
  }

  private static final class Builder implements AppComponent.Builder {
    private AppComponent_BootData appComponent_BootData;

    private OkhttpModule okhttpModule;

    private RealmModule realmModule;

    private PlaidModule plaidModule;

    private MediumModule mediumModule;

    private Crashes crashes;

    @Override
    public AppComponent build() {
      if (appComponent_BootData == null) {
        throw new IllegalStateException(
            AppComponent_BootData.class.getCanonicalName() + " must be set");
      }
      if (okhttpModule == null) {
        this.okhttpModule = new OkhttpModule();
      }
      if (realmModule == null) {
        this.realmModule = new RealmModule();
      }
      if (plaidModule == null) {
        this.plaidModule = new PlaidModule();
      }
      if (mediumModule == null) {
        this.mediumModule = new MediumModule();
      }
      if (crashes == null) {
        this.crashes = new Crashes();
      }
      return new DaggerAppComponent(this);
    }

    @Override
    public Builder realmModule(RealmModule realmModule) {
      this.realmModule = Preconditions.checkNotNull(realmModule);
      return this;
    }

    @Override
    public Builder okhttpModule(OkhttpModule okhttpModule) {
      this.okhttpModule = Preconditions.checkNotNull(okhttpModule);
      return this;
    }

    @Override
    public Builder plaidModule(PlaidModule plaidModule) {
      this.plaidModule = Preconditions.checkNotNull(plaidModule);
      return this;
    }

    @Override
    public Builder mediumModule(MediumModule mediumModule) {
      this.mediumModule = Preconditions.checkNotNull(mediumModule);
      return this;
    }

    @Override
    public Builder crashes(Crashes crashes) {
      this.crashes = Preconditions.checkNotNull(crashes);
      return this;
    }

    @Override
    public Builder bootData(AppComponent_BootData bootData) {
      this.appComponent_BootData = Preconditions.checkNotNull(bootData);
      return this;
    }
  }

  private final class SubcomponentBuilder extends App_Module.Subcomponent.Builder {
    private App seedInstance;

    @Override
    public App_Module.Subcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(App.class.getCanonicalName() + " must be set");
      }
      return new SubcomponentImpl(this);
    }

    @Override
    public void seedInstance(App arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class SubcomponentImpl implements App_Module.Subcomponent {
    private SubcomponentImpl(SubcomponentBuilder builder) {}

    @Override
    public void inject(App arg0) {
      injectApp(arg0);
    }

    private App injectApp(App instance) {
      App_MembersInjector.injectFabric(instance, DaggerAppComponent.this.getFabricProvider.get());
      return instance;
    }
  }

  private final class MA_M_CMA_MainActivitySubcomponentBuilder
      extends MainActivity_Module_ContributeMainActivity.MainActivitySubcomponent.Builder {
    private MainActivity seedInstance;

    @Override
    public MainActivity_Module_ContributeMainActivity.MainActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(MainActivity.class.getCanonicalName() + " must be set");
      }
      return new MA_M_CMA_MainActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(MainActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class MA_M_CMA_MainActivitySubcomponentImpl
      implements MainActivity_Module_ContributeMainActivity.MainActivitySubcomponent {
    private MA_M_CMA_MainActivitySubcomponentImpl(
        MA_M_CMA_MainActivitySubcomponentBuilder builder) {}

    private User.Manager getManager() {
      return new User.Manager(DaggerAppComponent.this.getRealm());
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      MainActivity_MembersInjector.injectPlugins(
          instance, DaggerAppComponent.this.pluginsProvider.get());
      MainActivity_MembersInjector.injectRealm(instance, DaggerAppComponent.this.getRealm());
      MainActivity_MembersInjector.injectUserManager(instance, getManager());
      return instance;
    }
  }

  private final class MA_M_CMA2_MainActivitySubcomponentBuilder
      extends evovetech.sample.github.MainActivity_Module_ContributeMainActivity
          .MainActivitySubcomponent.Builder {
    private evovetech.sample.github.MainActivity seedInstance;

    @Override
    public evovetech.sample.github.MainActivity_Module_ContributeMainActivity
            .MainActivitySubcomponent
        build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            evovetech.sample.github.MainActivity.class.getCanonicalName() + " must be set");
      }
      return new MA_M_CMA2_MainActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(evovetech.sample.github.MainActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class MA_M_CMA2_MainActivitySubcomponentImpl
      implements evovetech.sample.github.MainActivity_Module_ContributeMainActivity
          .MainActivitySubcomponent {
    private MA_M_CMA2_MainActivitySubcomponentImpl(
        MA_M_CMA2_MainActivitySubcomponentBuilder builder) {}

    @Override
    public void inject(evovetech.sample.github.MainActivity arg0) {}
  }

  private final class PlaidActivitySubcomponentBuilder
      extends PlaidActivity_Module_ContributePlaidActivity.PlaidActivitySubcomponent.Builder {
    private PlaidActivity seedInstance;

    @Override
    public PlaidActivity_Module_ContributePlaidActivity.PlaidActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(PlaidActivity.class.getCanonicalName() + " must be set");
      }
      return new PlaidActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(PlaidActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class PlaidActivitySubcomponentImpl
      implements PlaidActivity_Module_ContributePlaidActivity.PlaidActivitySubcomponent {
    private PlaidActivitySubcomponentImpl(PlaidActivitySubcomponentBuilder builder) {}

    @Override
    public void inject(PlaidActivity arg0) {
      injectPlaidActivity(arg0);
    }

    private PlaidActivity injectPlaidActivity(PlaidActivity instance) {
      PlaidActivity_MembersInjector.injectSupportFragmentInjector(
          instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfFragment());
      return instance;
    }
  }

  private final class MediumActivitySubcomponentBuilder
      extends MediumActivity_Module_ContributeMediumActivity.MediumActivitySubcomponent.Builder {
    private MediumActivity seedInstance;

    @Override
    public MediumActivity_Module_ContributeMediumActivity.MediumActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(MediumActivity.class.getCanonicalName() + " must be set");
      }
      return new MediumActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(MediumActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class MediumActivitySubcomponentImpl
      implements MediumActivity_Module_ContributeMediumActivity.MediumActivitySubcomponent {
    private MediumActivitySubcomponentImpl(MediumActivitySubcomponentBuilder builder) {}

    @Override
    public void inject(MediumActivity arg0) {
      injectMediumActivity(arg0);
    }

    private MediumActivity injectMediumActivity(MediumActivity instance) {
      MediumActivity_MembersInjector.injectSupportFragmentInjector(
          instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfFragment());
      return instance;
    }
  }

  private final class MA_M_CMA3_MainActivitySubcomponentBuilder
      extends evovetech.sample.instant.MainActivity_Module_ContributeMainActivity
          .MainActivitySubcomponent.Builder {
    private evovetech.sample.instant.MainActivity seedInstance;

    @Override
    public evovetech.sample.instant.MainActivity_Module_ContributeMainActivity
            .MainActivitySubcomponent
        build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            evovetech.sample.instant.MainActivity.class.getCanonicalName() + " must be set");
      }
      return new MA_M_CMA3_MainActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(evovetech.sample.instant.MainActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class MA_M_CMA3_MainActivitySubcomponentImpl
      implements evovetech.sample.instant.MainActivity_Module_ContributeMainActivity
          .MainActivitySubcomponent {
    private MA_M_CMA3_MainActivitySubcomponentImpl(
        MA_M_CMA3_MainActivitySubcomponentBuilder builder) {}

    @Override
    public void inject(evovetech.sample.instant.MainActivity arg0) {}
  }

  private final class PlaidFragmentSubcomponentBuilder
      extends PlaidFragment_Module_ContributePlaidFragment.PlaidFragmentSubcomponent.Builder {
    private PlaidFragment seedInstance;

    @Override
    public PlaidFragment_Module_ContributePlaidFragment.PlaidFragmentSubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(PlaidFragment.class.getCanonicalName() + " must be set");
      }
      return new PlaidFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(PlaidFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class PlaidFragmentSubcomponentImpl
      implements PlaidFragment_Module_ContributePlaidFragment.PlaidFragmentSubcomponent {
    private PlaidFragmentSubcomponentImpl(PlaidFragmentSubcomponentBuilder builder) {}

    private ViewModelFactory getViewModelFactory() {
      return ViewModelFactory_Factory.newViewModelFactory(DaggerAppComponent.this.getViewModels());
    }

    private ViewModelInstanceProvider getViewModelInstanceProvider() {
      return new ViewModelInstanceProvider(getViewModelFactory());
    }

    @Override
    public void inject(PlaidFragment arg0) {
      injectPlaidFragment(arg0);
    }

    private PlaidFragment injectPlaidFragment(PlaidFragment instance) {
      PlaidFragment_MembersInjector.injectViewModels(instance, getViewModelInstanceProvider());
      return instance;
    }
  }

  private final class MediumFragmentSubcomponentBuilder
      extends MediumFragment_Module_ContributeMediumFragment.MediumFragmentSubcomponent.Builder {
    private MediumFragment seedInstance;

    @Override
    public MediumFragment_Module_ContributeMediumFragment.MediumFragmentSubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(MediumFragment.class.getCanonicalName() + " must be set");
      }
      return new MediumFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(MediumFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class MediumFragmentSubcomponentImpl
      implements MediumFragment_Module_ContributeMediumFragment.MediumFragmentSubcomponent {
    private MediumFragmentSubcomponentImpl(MediumFragmentSubcomponentBuilder builder) {}

    private ViewModelFactory getViewModelFactory() {
      return ViewModelFactory_Factory.newViewModelFactory(DaggerAppComponent.this.getViewModels());
    }

    private ViewModelInstanceProvider getViewModelInstanceProvider() {
      return new ViewModelInstanceProvider(getViewModelFactory());
    }

    @Override
    public void inject(MediumFragment arg0) {
      injectMediumFragment(arg0);
    }

    private MediumFragment injectMediumFragment(MediumFragment instance) {
      MediumFragment_MembersInjector.injectViewModels(instance, getViewModelInstanceProvider());
      return instance;
    }
  }

  private final class MainFragmentSubcomponentBuilder
      extends MainFragment_Module_ContributeMainFragment.MainFragmentSubcomponent.Builder {
    private MainFragment seedInstance;

    @Override
    public MainFragment_Module_ContributeMainFragment.MainFragmentSubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(MainFragment.class.getCanonicalName() + " must be set");
      }
      return new MainFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(MainFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class MainFragmentSubcomponentImpl
      implements MainFragment_Module_ContributeMainFragment.MainFragmentSubcomponent {
    private MainFragmentSubcomponentImpl(MainFragmentSubcomponentBuilder builder) {}

    private ViewModelFactory getViewModelFactory() {
      return ViewModelFactory_Factory.newViewModelFactory(DaggerAppComponent.this.getViewModels());
    }

    private ViewModelInstanceProvider getViewModelInstanceProvider() {
      return new ViewModelInstanceProvider(getViewModelFactory());
    }

    @Override
    public void inject(MainFragment arg0) {
      injectMainFragment(arg0);
    }

    private MainFragment injectMainFragment(MainFragment instance) {
      MainFragment_MembersInjector.injectViewModels(instance, getViewModelInstanceProvider());
      return instance;
    }
  }

  private final class MediumUserComponentBuilder implements MediumUserComponent.Builder {
    private MediumUserModule mediumUserModule;

    private String username;

    @Override
    public MediumUserComponent build() {
      if (mediumUserModule == null) {
        this.mediumUserModule = new MediumUserModule();
      }
      if (username == null) {
        throw new IllegalStateException(String.class.getCanonicalName() + " must be set");
      }
      return new MediumUserComponentImpl(this);
    }

    @Override
    public MediumUserComponentBuilder username(String arg0) {
      this.username = Preconditions.checkNotNull(arg0);
      return this;
    }
  }

  private final class MediumUserComponentImpl implements MediumUserComponent {
    private MediumUserModule mediumUserModule;

    private String username;

    private MediumUserComponentImpl(MediumUserComponentBuilder builder) {
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MediumUserComponentBuilder builder) {
      this.mediumUserModule = builder.mediumUserModule;
      this.username = builder.username;
    }

    @Override
    public Call<MediumResponse<evovetech.blog.medium.User>> getUser() {
      return MediumUserModule_ProvideUserCallFactory.proxyProvideUserCall(
          mediumUserModule, username, DaggerAppComponent.this.mediumClientProvider.get());
    }
  }
}
